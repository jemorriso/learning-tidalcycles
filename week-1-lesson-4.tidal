d1 $ sound "hi lo"

-- easier than writing lo four times, becomes 8th notes because it's (1/2)/4
d1 $ sound "hi lo*4"

d1 $ sound "lo*16"

-- 16th notes
d1 $ sound "hi [hi lo]*4"

d1 $ sound "hi [hi lo]*1.5"


d1 $ sound "bd [sd hc]*1.5"

d2 $ n "0*4" # sound "kick"

d2 silence

d3 $ n "2" # sound "kick"

hush

d1 $ sound "[lo~]!2"

d2 $ sound "[~hi]!2"

d1 $ sound "hi [lo lo]/2"

d1 $ s "clap:4 [lo hi] / 2"

d1 $ s "[clap:4 [lo hi] / 2]*2"

d1 $ fast 2 $ s "[clap:4 [lo hi] / 2]"

d2 $ sound "[bd sn bd sn, hh!8, [~clap:4]!2]"

d2 $ sound "[bd!4, [~hh]!4, [~clap:4]!2]"

d1 $ sound "[bd sn, arpy*3, mt ht lt mt] [clap:6 snare]"

d1 $ fast 4 $ sound "{bd sd, arpy arpy:4 arpy:5 arpy:13 arpy:16}"

d1 $ fast 4 $ sound "{bd sd, arpy arpy:4 arpy:5 arpy:13 arpy:16}"

d1 $ fast 4 $ sound "[bd sd, arpy arpy:4 arpy:5 arpy:8 arpy:13]"

d2 $ fast 4 $ sound "arpy:13 arpy:16"

d1 $ fast 4 $ sound "{bd sd, arpy arpy:4 arpy:5}"

d1 $ fast 4 $ sound "[bd sd, arpy arpy:4 arpy:5]"

d1 $ fast 4 $ sound "{~~~~, arpy arpy:4 arpy:5 arpy:13 arpy:16}"

d1 $ fast 4 $ sound "{~~~~, arpy arpy:4 arpy:5}"

d4 $ fast 8 $ sound "arpy"

d5 $ fast 16 $ sound "arpy:4"

d6 $ fast 8 $ sound "arpy:5"

d7 $ fast 16 $ sound "arpy:13"

d2 $ fast 4 $ sound "bd sd"

d3 $ fast 8 $ sound "bd"

d9 $ fast 8 $ sound "bd"

d10 $ fast 8 $ sound "bd"

d11 $ fast 2 $ s "mt mt mt"

d1 $ fast 3 $ s "hi [arpy arpy:1 arpy:2]/3"

d1 $ fast 3 $ s "hi <arpy arpy:1 arpy:2>"

d1 $ fast 3 $ s "hi <arpy arpy:1 arpy:2 arpy:3 arpy:4>"

hush

--------------------------------------------------------------------------------
-- below is copied off course page
--------------------------------------------------------------------------------
-- SPEEDING UP, REPEATING, AND SLOWING DOWN

-- SPEEDING UP A STEP WITH "*"
-- https://www.youtube.com/watch?v=h_f11uago28&t=105s

-- Make a step go 'faster', so it repeats itself within its step:
d1 $ sound "hi lo*3"

-- It works with subsequences too
d1 $ sound "hi [hi lo]*2"

-- And 'n' patterns
d1 $ n "[0 ~ 0] 2 [0 9]*2 2" # sound "cpu"

-- Let's try speeding up a pattern by one-and-a-half:
d1 $ sound "bd [sd hc]*1.5"

-- It has two steps, so if you speed it up by 1.5, you get three steps.
-- The first time around you get "bd [sd hc sd]", the second time "bd [hc sd hc]"

-- SLOWING DOWN A STEP WITH "/"
-- https://www.youtube.com/watch?v=h_f11uago28&t=346s

-- Make 'lo' sound only every other cycle:
d1 $ sound "hi lo/2"

-- Make 'lo' sound only every third cycle:
d1 $ sound "hi lo/3"

-- Slow down a subsequence, so only one step sounds per cycle:
d1 $ sound "clap [numbers:0 numbers:1 numbers:2]/3"

-- Take two steps from a six step sequence each cycle, by slowing it by 3:
d1 $ n "0 0 0 [0 1 3 4 5 6]/3" # sound "cpu2"

-- Make things strange by slowing down with funky ratios!
d1 $ n "0 0 0 [0 1 3 4 5 6]/2.5" # sound "cpu2"

-- REPEATING A STEP WITH "!"
-- https://www.youtube.com/watch?v=h_f11uago28&t=275s

-- If you want to repeat steps on the same metrical level, then you can use ! ..
-- So this:
d1 $ sound "hi lo!3"

-- Is the same as this:
d1 $ sound "hi lo lo lo"

-- You can also use an ! on its own for a single repeat. So this:
d1 $ sound "hi lo !"

-- Is the same as this:
d1 $ sound "hi lo lo"

-- You can repeat subsequences too, so these are the same:
d1 $ sound "bd bd [hi lo] !"

d1 $ sound "bd bd [hi lo] [hi lo]"

-- POLYPHONY WITH ","
-- https://www.youtube.com/watch?v=h_f11uago28&t=668s

-- With ',' you can have more than one subsequence happening at the same time.
-- Where you have the possibility of more than one note happening at once,
-- that's called musical "polyphony"

-- This is like where you have multiple channels d1 and d2 active at the same time:
d2 $ sound "[bd sd]*4"

d2 $ sound "rs rs rs"

-- .. but with ","" you can put them both in the same pattern. This sounds
-- the same as the two above patterns playing at once:
d1 $ sound "[bd sd, rs rs rs]"

-- The subsequences line up to fill the same cycle.
-- So "[a b, c d e]" lines up like this:
-- |a--b--|
-- |c-d-e-|

-- There's an 'alphabet' sample set in the default samples that can help with
-- this!
d1 $ n "[0 1, 2 3 4]*1" # sound "alphabet"

d1 $ n "[0 1 2 3 4 5 6 7 8]*0.5" # sound "alphabet"

d1 $ n "[9 4 17 4 12 24]*0.5" # sound "alphabet"

d1 $ n "[9 4 17 4 12 24]*5" # sound "alphabet"

-- There's another way of getting subsequences to align, using { } instead of [ ]:
d1 $ n "{0 1, 2 3 4}" # sound "alphabet"

-- Video explanation: https://www.youtube.com/watch?v=h_f11uago28&t=822s

-- The first three cycles of this looks like this:
-- |ababab|
-- |cdecde|

-- What's happening? Well Tidal aligns the first subsequence, "0 1", to fit
-- the cycle, as before. But then it fits the others to it *stepwise*. So
-- now the steps align, but the cycles don't! In the space of three
-- cycles, there are three repetitions of "a b" and two repetitions of "c d e"

-- The [ ] notation creates what is called a musical 'polyrhythm' - multiple
-- rhythms happening within the same timeframe, e.g.:
d1 $ n "[0 5 2 ~, 0 3 4*2 0 3]" # sound "cpu2"

d1 $ n "[0 3 4*2 0 3]" # sound "cpu2"

d1 $ n "[0 3 4 4 0 3]" # sound "cpu2"

d1 $ n "[0 3 [4 4] 0 3]" # sound "cpu2"

-- The { } notation creates a 'polymetre' - where metres of different durations
-- phase in and out of each other, e.g.:
d1 $ n "{0 5 2 ~, 0 3 4*2 0 3}" # sound "cpu2"

-- I (Alex) get mixed up between polyrhythm and polymetre all the time, and
-- tend to just call them both polyrhythm for simplicity..

-- 'Traditional' music software with linear 'piano roll' style notation systems
-- can really struggle with polyrhythm/metre, but it's really easy with Tidal
-- and a *lot* of fun to explore.

-- RHYTHMIC FEET WITH "."
-- https://www.youtube.com/watch?v=h_f11uago28&t=988s

-- You can 'mark out' regular rhythmic 'feet' with "."

-- So this:
d1 $ sound "bd sd . mt ht lt . arpy arpy:4 . snare clap:4 bd"

-- Is another way of saying exactly this:
d1 $ sound "[bd sd] [mt ht lt] [arpy arpy:4] [snare clap:4 bd]"

-- So the "." breaks up a sequence into parts of equal duration

-- To break down a step _within_ the "." notation, you can still
-- use [], etc:
d1 $ sound "bd sd . mt [ht mt] lt . arpy [arpy:4 arpy:5] . snare clap:4 bd"

-- That's the same as:
d1 $ sound "[bd sd] [mt [ht mt] lt] [arpy [arpy:4 arpy:5]] [snare clap:4 bd]"

-- ONE STEP PER CYCLE WITH "<>"
-- https://www.youtube.com/watch?v=h_f11uago28&t=1166s

-- Often it's nice to pick one step from a subsequence every cycle.
-- One way is this:
d1 $ sound "hi [arpy arpy:1 arpy:2 arpy:3]/4"

-- You can do the same thing with < > - it picks one step per cycle, without
-- you having to worry about how many steps there are inside:
d1 $ sound "hi <arpy arpy:1 arpy:2 arpy:3>"

-- REVISION TASKS

-- Copy each of the following patterns in turn, and edit them so that they
-- are shorter, using the "<>", "!", "[]" and/or "." introduced above.

-- 1
d1 $ sound "kick snare snare"

d1 $ sound "kick snare !"

-- 2
d1 $ sound "kick [snare snare]"

d1 $ sound "kick snare*2"

-- 3
d1 $ sound "kick snare kick snare kick snare"

---- in this case both work because it's at the base level
d1 $ sound "[kick snare]*3 "

d1 $ sound "[kick snare]!3 "

-- 4
d1 $ n "0 [1 2 3]/3" # sound "cpu2"

d1 $ n "0 <1 2 3>" # sound "cpu2"

-- 5
d1 $ n "[0 0 2] [4 5 6 7] [4 1] [0 3 0 3]" # sound "cpu2"

d1 $ n "0 ! 2 . 4 5 6 7 . 4 1 . [0 3] !" # sound "cpu2"

-- 6
d1 $ sound "kick snare kick snare kick snare clap"

d2 $ sound "bd sd"

---- nope
d1 $ sound "[kick snare]!3 clap"
d1 $ sound "{[kick snare]!3 clap}"
d1 $ sound "[kick . snare]!3 . clap"

---- turns out the instructor was wrong lol, here is a solution we didn't know yet
---- makes the clap take half as long (which is what we want because the two notes inside the brackets are half the length of the clap)
d1 $ sound "[kick snare]!3 clap@0.5"

-- 7
d1 $ sound "[kick snare kick snare kick snare] clap"

d1 $ sound "[kick snare]*3 clap"

-- 8
d1 $ sound "bd sd sd sd bd [sd sd sd]"

d1 $ sound "bd sd!3 bd sd*3"

---- nope
d1 $ sound "bd <sd!3 sd*3>"

-- Trying to make code as short as possible is called "golfing" for some reason.
-- It can be useful as a form of practice, but sometimes longer code
-- is actually much easier to understand and edit!
